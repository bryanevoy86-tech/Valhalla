import os
import socket
import struct

import aiohttp

CLAM_HOST = os.getenv("CLAMAV_HOST", "localhost")
CLAM_PORT = int(os.getenv("CLAMAV_PORT", "3310"))
SCAN_API_URL = os.getenv("MALWARE_SCAN_API_URL")
SCAN_API_KEY = os.getenv("MALWARE_SCAN_API_KEY")


class MalwareScanError(Exception):
    pass


async def scan_with_clamav(file_path: str) -> tuple[bool, str]:
    """Return (is_clean, message)."""
    try:
        with open(file_path, "rb") as f:
            data = f.read()
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((CLAM_HOST, CLAM_PORT))
        s.sendall(b"zINSTREAM\0")
        size = 8192
        for i in range(0, len(data), size):
            chunk = data[i : i + size]
            s.sendall(struct.pack(">I", len(chunk)) + chunk)
        s.sendall(struct.pack(">I", 0))
        resp = b""
        while True:
            r = s.recv(4096)
            if not r:
                break
            resp += r
        s.close()
        text = resp.decode()
        if "FOUND" in text:
            return False, text.strip()
        return True, "Clean"
    except Exception as e:
        raise MalwareScanError(f"ClamAV error: {e}")


async def scan_with_api(file_path: str) -> tuple[bool, str]:
    if not (SCAN_API_URL and SCAN_API_KEY):
        return True, "No API configured"
    async with aiohttp.ClientSession() as client:
        with open(file_path, "rb") as f:
            data = {"file": f}
            headers = {"Authorization": f"Bearer {SCAN_API_KEY}"}
            async with client.post(SCAN_API_URL, data=data, headers=headers) as r:
                if r.status != 200:
                    raise MalwareScanError(f"API scan failed: {await r.text()}")
                res = await r.json()
                if res.get("infected"):
                    return False, res.get("details", "Infected")
                return True, "Clean"


async def scan_file(file_path: str) -> tuple[bool, str]:
    # Try ClamAV first
    try:
        return await scan_with_clamav(file_path)
    except MalwareScanError:
        return await scan_with_api(file_path)
